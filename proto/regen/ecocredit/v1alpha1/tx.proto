syntax = "proto3";

package regen.ecocredit.v1alpha1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "regen/ecocredit/v1alpha1/filter.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/regen-network/regen-ledger/x/ecocredit";

// Msg is the regen.ecocredit.v1alpha1 Msg service.
service Msg {

  // CreateClass creates a new credit class with an approved list of issuers and
  // optional metadata.
  rpc CreateClass(MsgCreateClass) returns (MsgCreateClassResponse);

  // CreateBatch creates a new batch of credits for an existing credit class.
  // This will create a new batch denom with a fixed supply. Issued credits can
  // be distributed to recipients in either tradable or retired form.
  rpc CreateBatch(MsgCreateBatch) returns (MsgCreateBatchResponse);

  // Send sends tradable credits from one account to another account. Sent
  // credits can either be tradable or retired on receipt.
  rpc Send(MsgSend) returns (MsgSendResponse);

  // Retire retires a specified number of credits in the holder's account.
  rpc Retire(MsgRetire) returns (MsgRetireResponse);

  // Cancel removes a number of credits from the holder's account and also
  // deducts them from the tradable supply, effectively cancelling their
  // issuance on Regen Ledger
  rpc Cancel(MsgCancel) returns (MsgCancelResponse);

  rpc Sell(MsgSell) returns (MsgSellResponse);

  rpc Buy(MsgBuy) returns (MsgBuyResponse);

  rpc CreatePool(MsgCreatePool) returns (MsgCreatePoolResponse);

  rpc DepositPool(MsgDepositPool) returns (MsgDepositPoolResponse);

  rpc WithdrawPool(MsgWithdrawPool) returns (MsgWithdrawPoolResponse);

  rpc WithdrawPoolExact(MsgWithdrawPoolExact) returns (MsgWithdrawPoolExactResponse);
}

// MsgCreateClass is the Msg/CreateClass request type.
message MsgCreateClass {

  // admin is the address of the account that created the credit class.
  string admin = 1;

  // issuers are the account addresses of the approved issuers.
  repeated string issuers = 2;

  // metadata is any arbitrary metadata to attached to the credit class.
  bytes metadata = 3;

  // credit_type_name describes the type of credit (e.g. "carbon", "biodiversity").
  string credit_type_name = 4;
}

// MsgCreateClassResponse is the Msg/CreateClass response type.
message MsgCreateClassResponse {

  // class_id is the unique ID of the newly created credit class.
  string class_id = 1;
}

// MsgCreateBatch is the Msg/CreateBatch request type.
message MsgCreateBatch {

  // issuer is the address of the batch issuer.
  string issuer = 1;

  // class_id is the unique ID of the class.
  string class_id = 2;

  // issuance are the credits issued in the batch.
  repeated BatchIssuance issuance = 3;

  // metadata is any arbitrary metadata attached to the credit batch.
  bytes metadata = 4;

  // start_date is the beginning of the period during which this credit batch
  // was quantified and verified.
  google.protobuf.Timestamp start_date = 5 [ (gogoproto.stdtime) = true ];

  // end_date is the end of the period during which this credit batch was
  // quantified and verified.
  google.protobuf.Timestamp end_date = 6 [ (gogoproto.stdtime) = true ];

  // project_location is the location of the project backing the credits in this
  // batch. It is a string of the form
  // <country-code>[-<sub-national-code>[ <postal-code>]], with the first two
  // fields conforming to ISO 3166-2, and postal-code being up to 64
  // alphanumeric characters. country-code is required, while sub-national-code
  // and postal-code can be added for increasing precision.
  string project_location = 7;

  // BatchIssuance represents the issuance of some credits in a batch to a
  // single recipient.
  message BatchIssuance {

    // recipient is the account of the recipient.
    string recipient = 1;

    // tradable_amount is the number of credits in this issuance that can be
    // traded by this recipient. Decimal values are acceptable.
    string tradable_amount = 2;

    // retired_amount is the number of credits in this issuance that are
    // effectively retired by the issuer on receipt. Decimal values are
    // acceptable.
    string retired_amount = 3;

    // retirement_location is the location of the beneficiary or buyer of the
    // retired credits. This must be provided if retired_amount is positive. It
    // is a string of the form
    // <country-code>[-<sub-national-code>[ <postal-code>]], with the first two
    // fields conforming to ISO 3166-2, and postal-code being up to 64
    // alphanumeric characters.
    string retirement_location = 4;
  }
}

// MsgCreateBatchResponse is the Msg/CreateBatch response type.
message MsgCreateBatchResponse {

  // batch_denom is the unique denomination ID of the newly created batch.
  string batch_denom = 1;
}

// MsgSend is the Msg/Send request type.
message MsgSend {

  // sender is the address of the account sending credits.
  string sender = 1;

  // sender is the address of the account receiving credits.
  string recipient = 2;

  // credits are the credits being sent.
  repeated SendCredits credits = 3;

  // SendCredits specifies a batch and the number of credits being transferred.
  // This is split into tradable credits, which will remain tradable on receipt,
  // and retired credits, which will be retired on receipt.
  message SendCredits {

    // batch_denom is the unique ID of the credit batch.
    string batch_denom = 1;

    // tradable_amount is the number of credits in this transfer that can be
    // traded by the recipient. Decimal values are acceptable within the
    // precision returned by Query/Precision.
    string tradable_amount = 2;

    // retired_amount is the number of credits in this transfer that are
    // effectively retired by the issuer on receipt. Decimal values are
    // acceptable within the precision returned by Query/Precision.
    string retired_amount = 3;

    // retirement_location is the location of the beneficiary or buyer of the
    // retired credits. This must be provided if retired_amount is positive. It
    // is a string of the form
    // <country-code>[-<sub-national-code>[ <postal-code>]], with the first two
    // fields conforming to ISO 3166-2, and postal-code being up to 64
    // alphanumeric characters.
    string retirement_location = 4;
  }
}

// MsgSendResponse is the Msg/Send response type.
message MsgSendResponse {}

// MsgRetire is the Msg/Retire request type.
message MsgRetire {

  // holder is the credit holder address.
  string holder = 1;

  // credits are the credits being retired.
  repeated RetireCredits credits = 2;

  // RetireCredits specifies a batch and the number of credits being retired.
  message RetireCredits {

    // batch_denom is the unique ID of the credit batch.
    string batch_denom = 1;

    // amount is the number of credits being retired.
    // Decimal values are acceptable within the precision returned by
    // Query/Precision.
    string amount = 2;
  }

  // location is the location of the beneficiary or buyer of the retired
  // credits. It is a string of the form
  // <country-code>[-<sub-national-code>[ <postal-code>]], with the first two
  // fields conforming to ISO 3166-2, and postal-code being up to 64
  // alphanumeric characters.
  string location = 3;
}

// MsgRetire is the Msg/Retire response type.
message MsgRetireResponse {}

// MsgCancel is the Msg/Cancel request type.
message MsgCancel {

  // holder is the credit holder address.
  string holder = 1;

  // credits are the credits being cancelled.
  repeated CancelCredits credits = 2;

  // CancelCredits specifies a batch and the number of credits being cancelled.
  message CancelCredits {

    // batch_denom is the unique ID of the credit batch.
    string batch_denom = 1;

    // amount is the number of credits being cancelled.
    // Decimal values are acceptable within the precision returned by
    // Query/Precision.
    string amount = 2;
  }
}

// MsgCancelResponse is the Msg/Cancel response type.
message MsgCancelResponse {}

message MsgSell {
  string owner = 1;
  repeated Order orders = 2;

  message Order {
    string batch_denom = 1;
    string amount = 2;
    string ask_denom = 3;
    string ask_price = 4;
    bool dont_auto_retire = 5;
  }
}

message MsgSellResponse {
  repeated uint64 order_ids = 1;
}

message MsgBuy {
  string buyer = 1;
  repeated Order orders = 3;

  message Order {
    BatchFilter filter = 1;
    string amount = 2;
    string bid_denom = 3;
    string bid_price = 4;
    bool dont_auto_retire = 5;
  }
}

message MsgBuyResponse {
  repeated uint64 order_ids = 1;
}

message MsgCreatePool {
  string creator = 1;
  BatchFilter filter = 2;
  PoolDeposit deposit = 3;
}

message MsgCreatePoolResponse {
  uint64 pool_id = 1;
}

message PoolDeposit {
  repeated CreditAmount sell_credits = 1;
  cosmos.base.v1beta1.Coin buy_coin = 2;
}

message CreditAmount {
  string batch_denom = 1;
  string amount = 2;
}

message MsgDepositPool {
  string depositor = 1;
  uint64 pool_id = 2;
  PoolDeposit deposit = 3;
}


message MsgDepositPoolResponse {}

message MsgWithdrawPool {
  string depositor = 1;
  uint64 pool_id = 2;
  cosmos.base.v1beta1.Coin buy_coin = 3;
}

message MsgWithdrawPoolResponse {}

message MsgWithdrawPoolExact {
  string depositor = 1;
  uint64 pool_id = 2;
  repeated CreditAmount credits = 3;
}

message MsgWithdrawPoolExactResponse {}
